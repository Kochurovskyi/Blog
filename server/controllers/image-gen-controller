const { PredictionServiceClient } = require("@google-cloud/aiplatform").v1;
const { helpers } = require("@google-cloud/aiplatform");
const HttpError = require("../model/http-error");
const { GoogleAuth } = require("google-auth-library");

const auth = new GoogleAuth({
  keyFile: "rm-gcp-bsa-dev-7fd4fb996dae.json",
  scopes: "https://www.googleapis.com/auth/cloud-platform",
});

const projectId = process.env.CAIP_PROJECT_ID;
const location = "us-central1";

const clientOptions = {
  apiEndpoint: `${location}-aiplatform.googleapis.com`,
  auth,
};
const predictionServiceClient = new PredictionServiceClient(clientOptions);

async function generateImage(req, res, next) {
  const { prompt } = req.body;

  const endpoint = `projects/${projectId}/locations/${location}/publishers/google/models/imagen-3.0-generate-001`;

  const promptText = { prompt: prompt };
  const instanceValue = helpers.toValue(promptText);
  const instances = [instanceValue];

  const parameter = {
    sampleCount: 1,
    aspectRatio: "1:1",
    safetyFilterLevel: "block_some",
    personGeneration: "allow_adult",
  };
  const parameters = helpers.toValue(parameter);

  const request = {
    endpoint,
    instances,
    parameters,
  };

  try {
    const [response] = await predictionServiceClient.predict(request);
    const predictions = response.predictions;
    if (predictions.length === 0) {
      return res.status(500).json({
        message:
          "No image was generated. Check the request parameters and prompt.",
      });
    } else {
      const prediction = predictions[0];
      const base64Image =
        prediction.structValue.fields.bytesBase64Encoded.stringValue;
      return res.status(200).json({ imageBase64: base64Image });
    }
  } catch (err) {
    console.log(err);
    return next(
      new HttpError("Image generation failed, please try again", 500)
    );
  }
}

module.exports = generateImage;
